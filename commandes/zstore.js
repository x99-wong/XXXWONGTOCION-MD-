
const { ezra } = require('../Rahmani/Md');

ezra({
  nomCom: "happi",
  categorie: "Rahmani-funs",
  reaction: "ЁЯШВ"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "ЁЯлг *RAHMANI HAPPY WE GO...* ЁЯдж" });
    const animations =  ['ЁЯШГ', 'ЁЯШД', 'ЁЯШБ', 'ЁЯШК', 'ЁЯШО', 'ЁЯе│', 'ЁЯШ╕', 'ЁЯШ╣', 'ЁЯМЮ', 'ЁЯМИ', 'ЁЯШГ', 'ЁЯШД', 'ЁЯШБ', 'ЁЯШК', 'ЁЯШО', 'ЁЯе│', 'ЁЯШ╕', 'ЁЯШ╣', 'ЁЯМЮ', 'ЁЯМИ', 'ЁЯШГ', 'ЁЯШД', 'ЁЯШБ', 'ЁЯШК'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("тЭМ *Error!* " + error.message);
  }
});
ezra({
  nomCom: "heart",
  aliases: ["moyo", "hrt"],
  categorie: "Rahmani-fun",
  reaction: "ЁЯлА"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "ЁЯлг *RAHMANI HEART WE GO...* ЁЯдж" });
    const animations =  ['ЁЯТЦ', 'ЁЯТЧ', 'ЁЯТХ', 'тЭдя╕П', 'ЁЯТЫ', 'ЁЯТЪ', 'ЁЯлА', 'ЁЯТЩ', 'ЁЯТЬ', 'ЁЯЦд', 'тЩея╕П', 'ЁЯдН', 'ЁЯдО', 'ЁЯТЧ', 'ЁЯТЮ', 'ЁЯТУ', 'ЁЯТШ', 'ЁЯТЭ', 'тЩея╕П', 'ЁЯТЯ', 'ЁЯлА', 'тЭдя╕П'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("тЭМ *Error!* " + error.message);
  }
});
ezra({
  nomCom: "angry",
  categorie: "Rahmani-fun",
  reaction: "ЁЯе║"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "ЁЯлг *RAHMANI ANGRY HERE WE GO...* ЁЯдж" });
    const animations =   ['ЁЯШб', 'ЁЯШа', 'ЁЯдм', 'ЁЯШд', 'ЁЯШ╛', 'ЁЯШб', 'ЁЯШа', 'ЁЯдм', 'ЁЯШд', 'ЁЯШ╛'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("тЭМ *Error!* " + error.message);
  }
});
ezra({
  nomCom: "sad",
  aliases: ["heartbroken", "hrtbroken"],
  categorie: "Rahmani-fun",
  reaction: "ЁЯШТ"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "ЁЯлг *RAHMANI SAD WE GO...* ЁЯдж" });
    const animations =  ['ЁЯе║', 'ЁЯШЯ', 'ЁЯШХ', 'ЁЯШЦ', 'ЁЯШл', 'ЁЯЩБ', 'ЁЯШй', 'ЁЯШе', 'ЁЯШУ', 'ЁЯШк', 'ЁЯШв', 'ЁЯШФ', 'ЁЯШЮ', 'ЁЯШн', 'ЁЯТФ', 'ЁЯШн', 'ЁЯШ┐'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("тЭМ *Error!* " + error.message);
  }
});
ezra({
  nomCom: "shy",
  aliases: ["shyoff", "shyy"],
  categorie: "Rahmani-fun",
  reaction: "ЁЯеВ"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "ЁЯлг *RAHMANI SHY WE GO...* ЁЯдж" });
    const animations =  ['ЁЯШ│', 'ЁЯШК', 'ЁЯШ╢', 'ЁЯЩИ', 'ЁЯЩК', 'ЁЯШ│', 'ЁЯШК', 'ЁЯШ╢', 'ЁЯЩИ', 'ЁЯЩК'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("тЭМ *Error!* " + error.message);
  }
});
ezra({
  nomCom: "moon",
  aliases: ["mon", "mwezi"],
  categorie: "Criss-fun",
  reaction: "ЁЯМЪ"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "ЁЯлг *RAHMANI MOON WE GO...* ЁЯдж" });
    const animations =   ['ЁЯМЧ', 'ЁЯМШ', 'ЁЯМС', 'ЁЯМТ', 'ЁЯМУ', 'ЁЯМФ', 'ЁЯМХ', 'ЁЯМЦ', 'ЁЯМЧ', 'ЁЯМШ', 'ЁЯМС', 'ЁЯМТ', 'ЁЯМУ', 'ЁЯМФ', 'ЁЯМХ', 'ЁЯМЦ', 'ЁЯМЧ', 'ЁЯМШ', 'ЁЯМС', 'ЁЯМТ', 'ЁЯМУ', 'ЁЯМФ', 'ЁЯМХ', 'ЁЯМЦ', 'ЁЯМЧ', 'ЁЯМШ', 'ЁЯМС', 'ЁЯМТ', 'ЁЯМУ', 'ЁЯМФ', 'ЁЯМХ', "ЁЯМЪЁЯМЭ"];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("тЭМ *Error!* " + error.message);
  }
});

ezra({
  nomCom: "nikal",
  categorie: "Rahmani-fun",
  reaction: "тБЙя╕П"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "ЁЯлг *RAHMANI NIKAL WE GO...* ЁЯдж" });
    const animations = ["   тгатг╢тб╛таПтаЙтаЩта│твжтбА   тватаЮтаЙтаЩта▓тбА \n  тг┤та┐таП          тв│тбА тбП         тв╖\nтватгЯтгЛтбАтвАтгАтгАтбА тгАтбА   тгз тв╕          тбЗ\nтв╕тгптбнтаБта╕тгЫтгЯтаЖтб┤тг╗тб▓     тг┐  тг╕   Nikal   тбЗ\n тгЯтг┐тбн     тв▒        тг┐  тв╣           тбЗ\n  таЩтв┐тгптаД   __        тб┐  тбЗ        тб╝\n   та╣тг╢таЖ     тб┤таГ    таШтадтгДтгатаЮ \n    тв╕тг╖тбжтвдтбдтвдтгЮтгБ          \n твАтгдтг┤тг┐тгПтаБ  та╕тгПтвптг╖тгЦтгжтбА      \nтвАтг╛тг╜тг┐тг┐тг┐тг┐таЫтв▓тг╢тг╛твЙтб╖тг┐тг┐та╡тг┐      \nтг╝тг┐таНтаЙтг┐тбнтаЙтаЩтв║тгЗтг╝тбП    тгДтв╕      `", "   тгатг╢тб╛таПтаЙтаЩта│твжтбА   тватаЮтаЙтаЩта▓тбА \n  тг┤та┐таП          тв│тбА тбП         тв╖\nтватгЯтгЛтбАтвАтгАтгАтбА тгАтбА   тгз тв╕          тбЗ\nтв╕тгптбнтаБта╕тгЫтгЯтаЖтб┤тг╗тб▓     тг┐  тг╕   Lavde   тбЗ\n тгЯтг┐тбн     тв▒        тг┐  тв╣           тбЗ\n  таЩтв┐тгптаД  |__|     тб┐  тбЗ        тб╝\n   та╣тг╢таЖ     тб┤таГ    таШтадтгДтгатаЮ \n    тв╕тг╖тбжтвдтбдтвдтгЮтгБ          \n твАтгдтг┤тг┐тгПтаБ  та╕тгПтвптг╖тгЦтгжтбА      \nтвАтг╛тг╜тг┐тг┐тг┐тг┐таЫтв▓тг╢тг╛твЙтб╖тг┐тг┐та╡тг┐      \nтг╝тг┐таНтаЙтг┐тбнтаЙтаЩтв║тгЗтг╝тбП    тгДтв╕      `", "   тгатг╢тб╛таПтаЙтаЩта│твжтбА   тватаЮтаЙтаЩта▓тбА \n  тг┤та┐таП           тв│тбА тбП         тв╖\nтватгЯтгЛтбАтвАтгАтгАтбА тгАтбА   тгз тв╕          тбЗ\nтв╕тгптбнтаБта╕тгЫтгЯтаЖтб┤тг╗тб▓    тг┐  тг╕   Pehli   тбЗ\n тгЯтг┐тбн     тв▒       тг┐  тв╣            тбЗ\n  таЩтв┐тгптаД  (P)       тб┐  тбЗ        тб╝\n   та╣тг╢таЖ     тб┤таГ    таШтадтгДтгатаЮ \n    тв╕тг╖тбжтвдтбдтвдтгЮтгБ          \n твАтгдтг┤тг┐тгПтаБ  та╕тгПтвптг╖тгЦтгжтбА      \nтвАтг╛тг╜тг┐тг┐тг┐тг┐таЫтв▓тг╢тг╛твЙтб╖тг┐тг┐та╡тг┐      \nтг╝тг┐таНтаЙтг┐тбнтаЙтаЩтв║тгЗтг╝тбП    тгДтв╕      `", "   тгатг╢тб╛таПтаЙтаЩта│твжтбА   тватаЮтаЙтаЩта▓тбА \n  тг┤та┐таП           тв│тбА тбП         тв╖\nтватгЯтгЛтбАтвАтгАтгАтбА тгАтбА   тгз тв╕          тбЗ\nтв╕тгптбнтаБта╕тгЫтгЯтаЖтб┤тг╗тб▓    тг┐  тг╕  Fursat  тбЗ\n тгЯтг┐тбн     тв▒         тг┐  тв╣           тбЗ\n  таЩтв┐тгптаД   __        тб┐  тбЗ        тб╝\n   та╣тг╢таЖ     тб┤таГ    таШтадтгДтгатаЮ \n    тв╕тг╖тбжтвдтбдтвдтгЮтгБ          \n твАтгдтг┤тг┐тгПтаБ  та╕тгПтвптг╖тгЦтгжтбА      \nтвАтг╛тг╜тг┐тг┐тг┐тг┐таЫтв▓тг╢тг╛твЙтб╖тг┐тг┐та╡тг┐      \nтг╝тг┐таНтаЙтг┐тбнтаЙтаЩтв║тгЗтг╝тбП    тгДтв╕      `", "   тгатг╢тб╛таПтаЙтаЩта│твжтбА   тватаЮтаЙтаЩта▓тбА \n  тг┤та┐таП           тв│тбА тбП         тв╖\nтватгЯтгЛтбАтвАтгАтгАтбА тгАтбА   тгз тв╕          тбЗ\nтв╕тгптбнтаБта╕тгЫтгЯтаЖтб┤тг╗тб▓    тг┐  тг╕  Meeee   тбЗ\n тгЯтг┐тбн     тв▒         тг┐  тв╣           тбЗ\n  таЩтв┐тгптаД  |__|      тб┐  тбЗ        тб╝\n   та╣тг╢таЖ     тб┤таГ    таШтадтгДтгатаЮ \n    тв╕тг╖тбжтвдтбдтвдтгЮтгБ          \n твАтгдтг┤тг┐тгПтаБ  та╕тгПтвптг╖тгЦтгжтбА      \nтвАтг╛тг╜тг┐тг┐тг┐тг┐таЫтв▓тг╢тг╛твЙтб╖тг┐тг┐та╡тг┐      \nтг╝тг┐таНтаЙтг┐тбнтаЙтаЩтв║тгЗтг╝тбП    тгДтв╕      `", "   тгатг╢тб╛таПтаЙтаЩта│твжтбА   тватаЮтаЙтаЩта▓тбА \n  тг┤та┐таП           тв│тбА тбП         тв╖\nтватгЯтгЛтбАтвАтгАтгАтбА тгАтбА   тгз тв╕           тбЗ\nтв╕тгптбнтаБта╕тгЫтгЯтаЖтб┤тг╗тб▓   тг┐  тг╕   Nikal   тбЗ\n тгЯтг┐тбн     тв▒        тг┐  тв╣            тбЗ\n  таЩтв┐тгптаД  lodu     тб┐  тбЗ       тб╝\n   та╣тг╢таЖ       тб┤таГ    таШтадтгДтгатаЮ \n    тв╕тг╖тбжтвдтбдтвдтгЮтгБ          \n твАтгдтг┤тг┐тгПтаБ  та╕тгПтвптг╖тгЦтгжтбА      \nтвАтг╛тг╜тг┐тг┐тг┐тг┐таЫтв▓тг╢тг╛твЙтб╖тг┐тг┐та╡тг┐      \nтг╝тг┐таНтаЙтг┐тбнтаЙтаЩтв║тгЗтг╝тбП    тгДтв╕ "];

    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("тЭМ *Error!* " + error.message);
  }
});

ezra({
  nomCom: "hand",
  categorie: "Rahmani-fun",
  reaction: "ЁЯСК"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "ЁЯлг *RAHMANI HAND WE GO...* ЁЯдж" });
    const animations = [
      '8тЬКя╕П===D', '8=тЬКя╕П==D', '8==тЬКя╕П=D', '8===тЬКя╕ПD', '8==тЬКя╕П=D', '8=тЬКя╕П==D', 
      '8тЬКя╕П===D', '8=тЬКя╕П==D', '8==тЬКя╕П=D', '8===тЬКя╕ПD', '8==тЬКя╕П=D', '8=тЬКя╕П==D', 
      '8тЬКя╕П===D', '8=тЬКя╕П==D', '8==тЬКя╕П=D', '8===тЬКя╕ПD', '8==тЬКя╕П=D', '8=тЬКя╕П==D', 
      '8тЬКя╕П===D', '8=тЬКя╕П==D', '8==тЬКя╕П=D', '8===тЬКя╕ПD ЁЯТж', '8==тЬКя╕П=DЁЯТж ЁЯТж', '8=тЬКя╕П==D ЁЯТжЁЯТж ЁЯТж'
    ];

    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("тЭМ *Error!* " + error.message);
  }
});
